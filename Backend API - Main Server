// server.js - Main Express Server
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const { Pool } = require('pg');
const cron = require('node-cron');
require('dotenv').config();

// Import route modules
const authRoutes = require('./routes/auth');
const userRoutes = require('./routes/users');
const turfRoutes = require('./routes/turfs');
const bookingRoutes = require('./routes/bookings');
const teamRoutes = require('./routes/teams');
const scheduleRoutes = require('./routes/schedules');
const adminRoutes = require('./routes/admin');

// Import scheduling services
const AutoScheduler = require('./services/autoScheduler');
const NotificationService = require('./services/notifications');

const app = express();
const PORT = process.env.PORT || 3000;

// Database connection
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT || 5432,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Test database connection
pool.connect((err, client, release) => {
  if (err) {
    console.error('Error connecting to database:', err);
    process.exit(1);
  }
  console.log('‚úÖ Database connected successfully');
  release();
});

// Make pool available to routes
app.locals.db = pool;

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP'
});
app.use('/api/', limiter);

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Request logging
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/turfs', turfRoutes);
app.use('/api/bookings', bookingRoutes);
app.use('/api/teams', teamRoutes);
app.use('/api/schedules', scheduleRoutes);
app.use('/api/admin', adminRoutes);

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Endpoint not found',
    path: req.originalUrl,
    method: req.method
  });
});

// Global error handler
app.use((err, req, res, next) => {
  console.error('Global error:', err);
  
  // Database connection errors
  if (err.code === 'ECONNREFUSED') {
    return res.status(503).json({
      error: 'Database connection failed',
      message: 'Service temporarily unavailable'
    });
  }
  
  // Validation errors
  if (err.name === 'ValidationError') {
    return res.status(400).json({
      error: 'Validation failed',
      details: err.message
    });
  }
  
  // Default error response
  res.status(err.status || 500).json({
    error: process.env.NODE_ENV === 'production' 
      ? 'Internal server error' 
      : err.message,
    ...(process.env.NODE_ENV !== 'production' && { stack: err.stack })
  });
});

// Initialize services
const autoScheduler = new AutoScheduler(pool);
const notificationService = new NotificationService();

// Cron Jobs Setup
console.log('üîÑ Setting up cron jobs...');

// Daily auto-scheduling at 6 AM
cron.schedule('0 6 * * *', async () => {
  console.log('ü§ñ Running daily auto-scheduling...');
  try {
    await autoScheduler.runDailyScheduling();
    console.log('‚úÖ Daily auto-scheduling completed');
  } catch (error) {
    console.error('‚ùå Daily auto-scheduling failed:', error);
    // Send alert to admins
    await notificationService.sendAdminAlert('Auto-scheduling failed', error.message);
  }
});

// Weekly team rebalancing on Sunday at 8 AM
cron.schedule('0 8 * * 0', async () => {
  console.log('‚öñÔ∏è Running weekly team rebalancing...');
  try {
    await autoScheduler.runWeeklyTeamRebalancing();
    console.log('‚úÖ Weekly team rebalancing completed');
  } catch (error) {
    console.error('‚ùå Weekly team rebalancing failed:', error);
    await notificationService.sendAdminAlert('Team rebalancing failed', error.message);
  }
});

// Hourly notification check
cron.schedule('0 * * * *', async () => {
  try {
    await notificationService.processPendingNotifications();
  } catch (error) {
    console.error('‚ùå Notification processing failed:', error);
  }
});

// Cleanup old data monthly (1st day at 2 AM)
cron.schedule('0 2 1 * *', async () => {
  console.log('üßπ Running monthly data cleanup...');
  try {
    await cleanupOldData(pool);
    console.log('‚úÖ Monthly cleanup completed');
  } catch (error) {
    console.error('‚ùå Monthly cleanup failed:', error);
  }
});

// Cleanup function
async function cleanupOldData(db) {
  const sixMonthsAgo = new Date();
  sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
  
  // Clean up old bookings (keep 6 months)
  await db.query(`
    DELETE FROM bookings 
    WHERE booking_date < $1 
    AND status IN ('completed', 'cancelled')
  `, [sixMonthsAgo]);
  
  // Clean up old notifications (keep 3 months)
  const threeMonthsAgo = new Date();
  threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
  
  await db.query(`
    DELETE FROM notifications 
    WHERE created_at < $1 
    AND is_read = true
  `, [threeMonthsAgo]);
  
  console.log('‚úÖ Old data cleanup completed');
}

// Graceful shutdown
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

async function gracefulShutdown() {
  console.log('üõë Shutting down gracefully...');
  
  // Close database connections
  await pool.end();
  
  // Close server
  process.exit(0);
}

// Start server
const server = app.listen(PORT, () => {
  console.log(`
üöÄ Server running on port ${PORT}
üåç Environment: ${process.env.NODE_ENV || 'development'}
üìä Database: Connected
‚è∞ Cron jobs: Active
üîí Security: Enabled
  `);
});

// Handle server startup errors
server.on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.error(`‚ùå Port ${PORT} is already in use`);
    process.exit(1);
  } else {
    console.error('‚ùå Server startup error:', err);
    process.exit(1);
  }
});

module.exports = app;
